{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao Projeto de Dados Estruturado","text":"<p>Para executar o projeto, visite README.md.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\napp/\n    pipeline/\n        extract.py # extacao dos dados na origem\n        load.py # carrega os dados tratados e higienizados em um destino\n        transform.py # trata, limpa e concatena os dados\n    main.py # executa step por step\nutils/\n    utils.py # funcoes uteis para a pipeline\ntests/\n    test_load.py # teste unitarios das funcoes no Load\n    test_transform.py # testes unitarios das funcoes no Transform\n    test_utils.py # teste unitarios das funcoes no Utils\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>graph LR\n  A[main.py] --&gt; B[extract.py];\n  B --&gt; C[transform.py];\n  C --&gt; D[load.py];\n  D --&gt; E[utils.py];\n  D --&gt; B;</code></pre>"},{"location":"#funcao-que-retorna-uma-lista-de-dataframes","title":"Fun\u00e7\u00e3o que retorna uma lista de DataFrames","text":"<p>Funcao para ler os arquivos csv de um diretorio retornar uma lista de dataframes pandas.</p> <p>Parameters:</p> Name Type Description Default <code>caminho_pasta</code> <code>str</code> <p>caminho da pasta com os arquivos.</p> required <p>return: lista de DataFrames pandas.</p> Source code in <code>app/pipeline/extract.py</code> <pre><code>def extract_csv_local(caminho_pasta: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    Funcao para ler os arquivos csv de um diretorio retornar uma lista de dataframes pandas.\n\n    args:\n        caminho_pasta (str): caminho da pasta com os arquivos.\n\n    return: lista de DataFrames pandas.\n    \"\"\"\n    # Verifica se o caminho da pasta existe\n    if not os.path.exists(caminho_pasta):\n        raise FileNotFoundError(\n            f'O diret\u00f3rio \"{caminho_pasta}\" n\u00e3o foi encontrado.'\n        )\n\n    # Lista para armazenar os dataframes\n    dataframes_list = []\n\n    # Loop pelos arquivos na pasta\n    for arquivo in os.listdir(caminho_pasta):\n        # Verifica se o arquivo tem a extens\u00e3o .csv\n        if arquivo.endswith('.csv'):\n            # Cria o caminho completo do arquivo\n            caminho_arquivo = os.path.join(caminho_pasta, arquivo)\n\n            # L\u00ea o arquivo CSV e adiciona o dataframe \u00e0 lista\n            df = pd.read_csv(caminho_arquivo, delimiter=';')\n            dataframes_list.append(df)\n    # Retorna a lista de dataframes\n    return dataframes_list\n</code></pre>"},{"location":"#funcao-que-trata-uma-lista-dataframes","title":"Fun\u00e7\u00e3o que trata uma lista DataFrames","text":"<p>Fun\u00e7\u00e3o que recebe uma lista de dataframes e concatena os dataframe retorna um unico dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>lista_de_dataframes</code> <code>List[DataFrame]</code> <p>uma lista de dataframes pandas.</p> required <p>return: Unico dataframe concatenado.</p> Source code in <code>app/pipeline/transform.py</code> <pre><code>def concatena_lista_dataframes(\n    lista_de_dataframes: List[pd.DataFrame],\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Fun\u00e7\u00e3o que recebe uma lista de dataframes e concatena os dataframe retorna um unico dataframe.\n\n    args:\n        lista_de_dataframes (List[pd.DataFrame]): uma lista de dataframes pandas.\n\n    return: Unico dataframe concatenado.\n    \"\"\"\n    return pd.concat(lista_de_dataframes, ignore_index=True)\n</code></pre>"},{"location":"#funcao-que-carrega-um-arquivo-csv-em-um-diretorio","title":"Fun\u00e7\u00e3o que carrega um arquivo .CSV em um diret\u00f3rio","text":"<p>Funcao recebe um DataFrame Pandas e exporta um arquivo csv em um diretorio.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>dataframe pandas.</p> required <code>output_path</code> <code>str</code> <p>caminho da pasta aonde o arquivo ser\u00e1 gerado.</p> required <code>nome_arquivo</code> <code>str</code> <p>nome do arquivo que ser\u00e1 gerado.</p> required Source code in <code>app/pipeline/load.py</code> <pre><code>def load_exporta_dataframe_csv(\n    dataframe: pd.DataFrame, output_path: str, nome_arquivo: str\n) -&gt; str:\n    \"\"\"\n    Funcao recebe um DataFrame Pandas e exporta um arquivo csv em um diretorio.\n\n    args:\n        dataframe (pd.DataFrame): dataframe pandas.\n        output_path (str): caminho da pasta aonde o arquivo ser\u00e1 gerado.\n        nome_arquivo (str): nome do arquivo que ser\u00e1 gerado.\n    \"\"\"\n    # cria diretorio de output dos dados\n    log_cria_diretorio = cria_diretorio_local(output_path)\n    # verifica se o diretorio foi criado com sucesso\n    # se criado com sucesso exporta o dataframe para csv no diretorio indicado\n    msg_de_sucesso = 'criado com sucesso'\n    if msg_de_sucesso.lower() in log_cria_diretorio.lower():\n        print(f'STEP LOAD - EXPORTA CSV - {log_cria_diretorio}')\n        try:\n            dataframe.to_csv(\n                f'{output_path}/{nome_arquivo}.csv',\n                sep=';',\n                header=True,\n                index=False,\n            )\n            print('STEP LOAD - EXPORTA CSV - Sucesso')\n        except Exception as e:\n            print(f'STEP LOAD - EXPORTA CSV - Insucesso: {e}')\n    else:\n        # Se o diretorio nao for criado printa a log na tela\n        print(f'STEP LOAD - EXPORTA CSV - {log_cria_diretorio}')\n        exit(1)\n</code></pre>"}]}